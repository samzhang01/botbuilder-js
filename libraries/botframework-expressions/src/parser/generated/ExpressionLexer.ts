// Generated from ../Expression.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly NUMBER = 24;
	public static readonly WHITESPACE = 25;
	public static readonly IDENTIFIER = 26;
	public static readonly NEWLINE = 27;
	public static readonly STRING = 28;
	public static readonly CONSTANT = 29;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 30;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "LETTER", "DIGIT", 
		"NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "CONSTANT", 
		"INVALID_TOKEN_DEFAULT_MODE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'!'", "'-'", "'+'", "'^'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'<>'", "'&'", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'('", "')'", 
		"'.'", "'['", "']'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "NUMBER", "WHITESPACE", "IDENTIFIER", 
		"NEWLINE", "STRING", "CONSTANT", "INVALID_TOKEN_DEFAULT_MODE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expression.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02 \xCC\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x06\x1B" +
		"~\n\x1B\r\x1B\x0E\x1B\x7F\x03\x1B\x03\x1B\x06\x1B\x84\n\x1B\r\x1B\x0E" +
		"\x1B\x85\x05\x1B\x88\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\x93\n\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x07\x1D\x98\n\x1D\f\x1D\x0E\x1D\x9B\v\x1D\x03\x1D\x05\x1D\x9E\n\x1D\x03" +
		"\x1E\x05\x1E\xA1\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
		"\x07\x1F\xA9\n\x1F\f\x1F\x0E\x1F\xAC\v\x1F\x03\x1F\x03\x1F\x03\x1F\x07" +
		"\x1F\xB1\n\x1F\f\x1F\x0E\x1F\xB4\v\x1F\x03\x1F\x05\x1F\xB7\n\x1F\x03 " +
		"\x03 \x07 \xBB\n \f \x0E \xBE\v \x03 \x03 \x03 \x07 \xC3\n \f \x0E \xC6" +
		"\v \x03 \x05 \xC9\n \x03!\x03!\x02\x02\x02\"\x03\x02\x03\x05\x02\x04\x07" +
		"\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15" +
		"\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02" +
		"\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191" +
		"\x02\x023\x02\x025\x02\x1A7\x02\x1B9\x02\x1C;\x02\x1D=\x02\x1E?\x02\x1F" +
		"A\x02 \x03\x02\t\x04\x02C\\c|\x03\x022;\x06\x02\v\v\"\"\xA2\xA2\uFF01" +
		"\uFF01\x05\x02%%BBaa\x04\x02//aa\x03\x02))\x03\x02$$\xDA\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x03C\x03\x02\x02\x02\x05E\x03\x02\x02\x02\x07G\x03\x02\x02" +
		"\x02\tI\x03\x02\x02\x02\vK\x03\x02\x02\x02\rM\x03\x02\x02\x02\x0FO\x03" +
		"\x02\x02\x02\x11Q\x03\x02\x02\x02\x13T\x03\x02\x02\x02\x15W\x03\x02\x02" +
		"\x02\x17Z\x03\x02\x02\x02\x19\\\x03\x02\x02\x02\x1B^\x03\x02\x02\x02\x1D" +
		"a\x03\x02\x02\x02\x1Fc\x03\x02\x02\x02!f\x03\x02\x02\x02#i\x03\x02\x02" +
		"\x02%l\x03\x02\x02\x02\'n\x03\x02\x02\x02)p\x03\x02\x02\x02+r\x03\x02" +
		"\x02\x02-t\x03\x02\x02\x02/v\x03\x02\x02\x021x\x03\x02\x02\x023z\x03\x02" +
		"\x02\x025}\x03\x02\x02\x027\x89\x03\x02\x02\x029\x92\x03\x02\x02\x02;" +
		"\xA0\x03\x02\x02\x02=\xB6\x03\x02\x02\x02?\xC8\x03\x02\x02\x02A\xCA\x03" +
		"\x02\x02\x02CD\x07#\x02\x02D\x04\x03\x02\x02\x02EF\x07/\x02\x02F\x06\x03" +
		"\x02\x02\x02GH\x07-\x02\x02H\b\x03\x02\x02\x02IJ\x07`\x02\x02J\n\x03\x02" +
		"\x02\x02KL\x07,\x02\x02L\f\x03\x02\x02\x02MN\x071\x02\x02N\x0E\x03\x02" +
		"\x02\x02OP\x07\'\x02\x02P\x10\x03\x02\x02\x02QR\x07?\x02\x02RS\x07?\x02" +
		"\x02S\x12\x03\x02\x02\x02TU\x07#\x02\x02UV\x07?\x02\x02V\x14\x03\x02\x02" +
		"\x02WX\x07>\x02\x02XY\x07@\x02\x02Y\x16\x03\x02\x02\x02Z[\x07(\x02\x02" +
		"[\x18\x03\x02\x02\x02\\]\x07>\x02\x02]\x1A\x03\x02\x02\x02^_\x07>\x02" +
		"\x02_`\x07?\x02\x02`\x1C\x03\x02\x02\x02ab\x07@\x02\x02b\x1E\x03\x02\x02" +
		"\x02cd\x07@\x02\x02de\x07?\x02\x02e \x03\x02\x02\x02fg\x07(\x02\x02gh" +
		"\x07(\x02\x02h\"\x03\x02\x02\x02ij\x07~\x02\x02jk\x07~\x02\x02k$\x03\x02" +
		"\x02\x02lm\x07*\x02\x02m&\x03\x02\x02\x02no\x07+\x02\x02o(\x03\x02\x02" +
		"\x02pq\x070\x02\x02q*\x03\x02\x02\x02rs\x07]\x02\x02s,\x03\x02\x02\x02" +
		"tu\x07_\x02\x02u.\x03\x02\x02\x02vw\x07.\x02\x02w0\x03\x02\x02\x02xy\t" +
		"\x02\x02\x02y2\x03\x02\x02\x02z{\t\x03\x02\x02{4\x03\x02\x02\x02|~\x05" +
		"3\x1A\x02}|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F}\x03\x02\x02\x02" +
		"\x7F\x80\x03\x02\x02\x02\x80\x87\x03\x02\x02\x02\x81\x83\x070\x02\x02" +
		"\x82\x84\x053\x1A\x02\x83\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02" +
		"\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x88\x03\x02\x02\x02" +
		"\x87\x81\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x886\x03\x02\x02\x02" +
		"\x89\x8A\t\x04\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8C\b\x1C\x02\x02\x8C" +
		"8\x03\x02\x02\x02\x8D\x93\x051\x19\x02\x8E\x93\t\x05\x02\x02\x8F\x90\x07" +
		"B\x02\x02\x90\x93\x07B\x02\x02\x91\x93\x04&\'\x02\x92\x8D\x03\x02\x02" +
		"\x02\x92\x8E\x03\x02\x02\x02\x92\x8F\x03\x02\x02\x02\x92\x91\x03\x02\x02" +
		"\x02\x93\x99\x03\x02\x02\x02\x94\x98\x051\x19\x02\x95\x98\x053\x1A\x02" +
		"\x96\x98\t\x06\x02\x02\x97\x94\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02" +
		"\x97\x96\x03\x02\x02\x02\x98\x9B\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02" +
		"\x99\x9A\x03\x02\x02\x02\x9A\x9D\x03\x02\x02\x02\x9B\x99\x03\x02\x02\x02" +
		"\x9C\x9E\x07#\x02\x02\x9D\x9C\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02" +
		"\x9E:\x03\x02\x02\x02\x9F\xA1\x07\x0F\x02\x02\xA0\x9F\x03\x02\x02\x02" +
		"\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA3\x07\f\x02\x02" +
		"\xA3\xA4\x03\x02\x02\x02\xA4\xA5\b\x1E\x02\x02\xA5<\x03\x02\x02\x02\xA6" +
		"\xAA\x07)\x02\x02\xA7\xA9\n\x07\x02\x02\xA8\xA7\x03\x02\x02\x02\xA9\xAC" +
		"\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAD" +
		"\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAD\xB7\x07)\x02\x02\xAE\xB2" +
		"\x07$\x02\x02\xAF\xB1\n\b\x02\x02\xB0\xAF\x03\x02\x02\x02\xB1\xB4\x03" +
		"\x02\x02\x02\xB2\xB0\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB5\x03" +
		"\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB5\xB7\x07$\x02\x02\xB6\xA6\x03" +
		"\x02\x02\x02\xB6\xAE\x03\x02\x02\x02\xB7>\x03\x02\x02\x02\xB8\xBC\x07" +
		"]\x02\x02\xB9\xBB\x057\x1C\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBE\x03\x02" +
		"\x02\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBF\x03\x02" +
		"\x02\x02\xBE\xBC\x03\x02\x02\x02\xBF\xC9\x07_\x02\x02\xC0\xC4\x07}\x02" +
		"\x02\xC1\xC3\x057\x1C\x02\xC2\xC1\x03\x02\x02\x02\xC3\xC6\x03\x02\x02" +
		"\x02\xC4\xC2\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC7\x03\x02\x02" +
		"\x02\xC6\xC4\x03\x02\x02\x02\xC7\xC9\x07\x7F\x02\x02\xC8\xB8\x03\x02\x02" +
		"\x02\xC8\xC0\x03\x02\x02\x02\xC9@\x03\x02\x02\x02\xCA\xCB\v\x02\x02\x02" +
		"\xCBB\x03\x02\x02\x02\x11\x02\x7F\x85\x87\x92\x97\x99\x9D\xA0\xAA\xB2" +
		"\xB6\xBC\xC4\xC8\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionLexer.__ATN) {
			ExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));
		}

		return ExpressionLexer.__ATN;
	}

}

